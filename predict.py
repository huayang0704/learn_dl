#!/usr/bin/python
#coding=utf8


##************************************************************************
## ** 预测模板
## **
## **
##************************************************************************
## ** qq: 876253250
## ** weibo: paul_华
##************************************************************************


import sys
import os
import datetime
import numpy as np
from fc import *


reload(sys)
sys.setdefaultencoding("utf-8")

def get_result(vec):
	max_value_index = 0
	max_value = 0
	for i in range(len(vec)):
		if vec[i] > max_value:
			max_value = vec[i]
			max_value_index = i
	return max_value_index

def evaluate(network, test_data_set, test_labels):

	label = get_result(test_labels)
	predict = get_result(network.predict(test_data_set))
	print 'label:', label, 'predict:', predict


if __name__ == "__main__":
	start = datetime.datetime.now()
	test_data_set
	test_labels = [[0.1],[0.1],[0.1],[0.1],[0.1],[0.1],[0.1],[0.9],[0.1],[0.1]]

	network = Network([784, 100, 10])
	evaluate(network, test_data_set, test_labels)

	end = datetime.datetime.now()
	print '[' + end.now().strftime('%Y-%m-%d %H:%M:%S') + ']******模型运行时长为:' + str((end - start).seconds) + '秒 *********'
